# coding: utf-8

"""
    LABO3

    MANAGE THE FILES  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SeancesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_seance(self, idcours, idseance, **kwargs):  # noqa: E501
        """Delete a seance by ID  # noqa: E501

        Delete a seance by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_seance(idcours, idseance, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object idcours: (required)
        :param object idseance: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_seance_with_http_info(idcours, idseance, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_seance_with_http_info(idcours, idseance, **kwargs)  # noqa: E501
            return data

    def delete_seance_with_http_info(self, idcours, idseance, **kwargs):  # noqa: E501
        """Delete a seance by ID  # noqa: E501

        Delete a seance by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_seance_with_http_info(idcours, idseance, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object idcours: (required)
        :param object idseance: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idcours', 'idseance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_seance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idcours' is set
        if ('idcours' not in params or
                params['idcours'] is None):
            raise ValueError("Missing the required parameter `idcours` when calling `delete_seance`")  # noqa: E501
        # verify the required parameter 'idseance' is set
        if ('idseance' not in params or
                params['idseance'] is None):
            raise ValueError("Missing the required parameter `idseance` when calling `delete_seance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idcours' in params:
            path_params['idcours'] = params['idcours']  # noqa: E501
        if 'idseance' in params:
            path_params['idseance'] = params['idseance']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cours/{idcours}/seances/{idseance}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_seances(self, idcours, **kwargs):  # noqa: E501
        """Get seances pour a cours  # noqa: E501

        Get seances pour a cours  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_seances(idcours, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object idcours: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_seances_with_http_info(idcours, **kwargs)  # noqa: E501
        else:
            (data) = self.get_seances_with_http_info(idcours, **kwargs)  # noqa: E501
            return data

    def get_seances_with_http_info(self, idcours, **kwargs):  # noqa: E501
        """Get seances pour a cours  # noqa: E501

        Get seances pour a cours  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_seances_with_http_info(idcours, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object idcours: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idcours']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_seances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idcours' is set
        if ('idcours' not in params or
                params['idcours'] is None):
            raise ValueError("Missing the required parameter `idcours` when calling `get_seances`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idcours' in params:
            path_params['idcours'] = params['idcours']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cours/{idcours}/seances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_seances_by_id(self, idcours, idseance, **kwargs):  # noqa: E501
        """Get a seance by ID  # noqa: E501

        Get a seance by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_seances_by_id(idcours, idseance, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object idcours: (required)
        :param object idseance: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_seances_by_id_with_http_info(idcours, idseance, **kwargs)  # noqa: E501
        else:
            (data) = self.get_seances_by_id_with_http_info(idcours, idseance, **kwargs)  # noqa: E501
            return data

    def get_seances_by_id_with_http_info(self, idcours, idseance, **kwargs):  # noqa: E501
        """Get a seance by ID  # noqa: E501

        Get a seance by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_seances_by_id_with_http_info(idcours, idseance, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object idcours: (required)
        :param object idseance: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idcours', 'idseance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_seances_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idcours' is set
        if ('idcours' not in params or
                params['idcours'] is None):
            raise ValueError("Missing the required parameter `idcours` when calling `get_seances_by_id`")  # noqa: E501
        # verify the required parameter 'idseance' is set
        if ('idseance' not in params or
                params['idseance'] is None):
            raise ValueError("Missing the required parameter `idseance` when calling `get_seances_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idcours' in params:
            path_params['idcours'] = params['idcours']  # noqa: E501
        if 'idseance' in params:
            path_params['idseance'] = params['idseance']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cours/{idcours}/seances/{idseance}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_seances_by_module(self, idcours, module, **kwargs):  # noqa: E501
        """Get liste de seance by module  # noqa: E501

        Get liste de seance by module  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_seances_by_module(idcours, module, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object idcours: (required)
        :param object module: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_seances_by_module_with_http_info(idcours, module, **kwargs)  # noqa: E501
        else:
            (data) = self.get_seances_by_module_with_http_info(idcours, module, **kwargs)  # noqa: E501
            return data

    def get_seances_by_module_with_http_info(self, idcours, module, **kwargs):  # noqa: E501
        """Get liste de seance by module  # noqa: E501

        Get liste de seance by module  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_seances_by_module_with_http_info(idcours, module, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object idcours: (required)
        :param object module: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idcours', 'module']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_seances_by_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idcours' is set
        if ('idcours' not in params or
                params['idcours'] is None):
            raise ValueError("Missing the required parameter `idcours` when calling `get_seances_by_module`")  # noqa: E501
        # verify the required parameter 'module' is set
        if ('module' not in params or
                params['module'] is None):
            raise ValueError("Missing the required parameter `module` when calling `get_seances_by_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idcours' in params:
            path_params['idcours'] = params['idcours']  # noqa: E501

        query_params = []
        if 'module' in params:
            query_params.append(('module', params['module']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cours/{idcours}/seances/module', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_seances_by_semaine(self, idcours, semaine, **kwargs):  # noqa: E501
        """Get liste de seance by semaine  # noqa: E501

        Get liste de seance by semaine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_seances_by_semaine(idcours, semaine, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object idcours: (required)
        :param object semaine: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_seances_by_semaine_with_http_info(idcours, semaine, **kwargs)  # noqa: E501
        else:
            (data) = self.get_seances_by_semaine_with_http_info(idcours, semaine, **kwargs)  # noqa: E501
            return data

    def get_seances_by_semaine_with_http_info(self, idcours, semaine, **kwargs):  # noqa: E501
        """Get liste de seance by semaine  # noqa: E501

        Get liste de seance by semaine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_seances_by_semaine_with_http_info(idcours, semaine, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object idcours: (required)
        :param object semaine: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idcours', 'semaine']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_seances_by_semaine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idcours' is set
        if ('idcours' not in params or
                params['idcours'] is None):
            raise ValueError("Missing the required parameter `idcours` when calling `get_seances_by_semaine`")  # noqa: E501
        # verify the required parameter 'semaine' is set
        if ('semaine' not in params or
                params['semaine'] is None):
            raise ValueError("Missing the required parameter `semaine` when calling `get_seances_by_semaine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idcours' in params:
            path_params['idcours'] = params['idcours']  # noqa: E501

        query_params = []
        if 'semaine' in params:
            query_params.append(('semaine', params['semaine']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cours/{idcours}/seances/semaine', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_seance(self, idcours, **kwargs):  # noqa: E501
        """Create a new seance in a cours  # noqa: E501

        Create a new seance in a cours  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_seance(idcours, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object idcours: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_seance_with_http_info(idcours, **kwargs)  # noqa: E501
        else:
            (data) = self.post_seance_with_http_info(idcours, **kwargs)  # noqa: E501
            return data

    def post_seance_with_http_info(self, idcours, **kwargs):  # noqa: E501
        """Create a new seance in a cours  # noqa: E501

        Create a new seance in a cours  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_seance_with_http_info(idcours, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object idcours: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idcours']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_seance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idcours' is set
        if ('idcours' not in params or
                params['idcours'] is None):
            raise ValueError("Missing the required parameter `idcours` when calling `post_seance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'idcours' in params:
            path_params['idcours'] = params['idcours']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cours/{idcours}/seances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
